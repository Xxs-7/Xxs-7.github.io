{"pageProps":{"toc":[{"text":"reconcile 原理","hash":"#reconcile-原理","depth":1}],"code":"var Component=(()=>{var o=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),p=(r,e)=>{for(var t in e)l(r,t,{get:e[t],enumerable:!0})},d=(r,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!C.call(r,i)&&i!==t&&l(r,i,{get:()=>e[i],enumerable:!(c=u(e,i))||c.enumerable});return r};var F=(r,e,t)=>(t=r!=null?o(m(r)):{},d(e||!r||!r.__esModule?l(t,\"default\",{value:r,enumerable:!0}):t,r)),w=r=>d(l({},\"__esModule\",{value:!0}),r);var a=b((k,s)=>{s.exports=_jsx_runtime});var T={};p(T,{default:()=>y});var n=F(a());function h(r){let e=Object.assign({h1:\"h1\",p:\"p\",ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",em:\"em\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{hash:\"reconcile-\\u539F\\u7406\",children:\"reconcile \\u539F\\u7406\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u5224\\u65AD\\u5B50\\u8282\\u70B9\\u7C7B\\u578B\\uFF1A\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"\\u5355\\u4E2A\\u8282\\u70B9\"}),`\n`,(0,n.jsx)(e.li,{children:\"\\u6570\\u7EC4\"}),`\n`,(0,n.jsx)(e.li,{children:\"\\u5B57\\u7B26\\u4E32\\u6216\\u6570\\u5B57\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`// react/packages/react-reconciler/src/ReactFiberBeginWork.old.js\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n\t\t// \\u9996\\u6B21\\u6E32\\u67D3\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n\t\t// \\u66F4\\u65B0\\u6E32\\u67D3\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"mountChildFibers\"}),\" \\u548C \",(0,n.jsx)(e.code,{children:\"reconcileChildFibers\"}),\"  \\u6DF1\\u6316\\u8FD8\\u662F\\u540C\\u4E00\\u4E2A\\u51FD\\u6570 \",(0,n.jsx)(e.code,{children:\"reconcileChildFibers\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export const reconcileChildFibers: ChildReconciler = createChildReconciler(\n  true,\n);\nexport const mountChildFibers: ChildReconciler = createChildReconciler(false);\n\nfunction createChildReconciler(shouldTrackSideEffects): ChildReconciler {\n\t// \\u7279\\u522B\\u591A\\u7684\\u5C0F\\u51FD\\u6570\n\t\\xB7\\xB7\\xB7\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n\t\t\t// \\u5904\\u7406\\u5355\\u4E2A\\u5B50\\u8282\\u70B9\\u7684\\u60C5\\u51B5\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          \\xB7\\xB7\\xB7\n        case REACT_LAZY_TYPE:\n          \\xB7\\xB7\\xB7\n      }\n\n\t\t\t// \\u591A\\u4E2A\\u5B50\\u8282\\u70B9\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n\t\t\t// \\u5904\\u7406\\u5B50\\u7EC4\\u4EF6\\u4E3A\\u8FED\\u4EE3\\u5668\\u7684\\u60C5\\u51B5\\uFF0C\\u5B9E\\u9645\\u4E0A\\u903B\\u8F91\\u548C\\u6570\\u7EC4\\u5DEE\\u4E0D\\u591A\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n\t\t// \\u5904\\u7406\\u5B50\\u7EC4\\u4EF6\\u662F\\u6587\\u672C\\u7684\\u60C5\\u51B5\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      \\xB7\\xB7\\xB7\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"shouldTrackSideEffects\"}),\" \\uFF1A\\u7528\\u4E8E\\u8868\\u793A\\u5904\\u7406\\u5F53\\u524D\\u7EC4\\u4EF6\\u65F6\\u662F\\u5426\\u5E94\\u8BE5\\u8DDF\\u8E2A\\u526F\\u4F5C\\u7528\\u3002\\u526F\\u4F5C\\u7528\\u662F\\u6307\\u90A3\\u4E9B\\u5728\\u7EC4\\u4EF6\\u6E32\\u67D3\\u8FC7\\u7A0B\\u4E2D\\u53EF\\u80FD\\u5F15\\u8D77\\u7684\\u989D\\u5916\\u64CD\\u4F5C\\uFF0C\\u4F8B\\u5982\\u8BBF\\u95EE\\u7F51\\u7EDC\\u3001\\u4FEE\\u6539\\u72B6\\u6001\\u7B49\\u3002\\u8FD9\\u91CC\\u66F4\\u65B0\\u6E32\\u67D3\\u76F8\\u8F83\\u4E8E\\u521D\\u6B21\\u6E32\\u67D3\\u5C31\\u662F\\u591A\\u4E86\\u526F\\u4F5C\\u7528\\u7684\\u5904\\u7406\\u903B\\u8F91\\u3002\"]}),`\n`,(0,n.jsx)(e.p,{children:\"\\u5904\\u7406\\u65B0\\u8001\\u76F8\\u540C\\u8282\\u70B9\\u7684 diff\\uFF0C\\u4EE3\\u7801\\u8F83\\u591A\\uFF0C\\u4E14\\u90FD\\u6BD4\\u8F83\\u91CD\\u8981\\uFF0C\\u5EFA\\u8BAE\\u770B\\u6E90\\u7801\\u3002\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u6B64\\u65F6\\u66F4\\u65B0\\u540E\\u7684\\u7EC4\\u4EF6\\u7684 fiber \\u8FD8\\u672A\\u521B\\u5EFA\\uFF0C\\u53EA\\u6709\\u5B9E\\u4F8B\\uFF08\\u7C7B\\u7EC4\\u4EF6\\u5B9E\\u4F8B\\u5316\\uFF0C\\u51FD\\u6570\\u7EC4\\u4EF6\\u6267\\u884C\\uFF09\",(0,n.jsx)(e.em,{children:(0,n.jsx)(e.code,{children:\"element\"})}),\" \\u3002\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`// react/packages/react-reconciler/src/ReactChildFiber.old.js\nfunction reconcileSingleElement(\n    returnFiber: Fiber, // \\u7236\\u7EC4\\u4EF6\\u7684 fiber\n    currentFirstChild: Fiber | null, // \\u5B50\\u7EC4\\u4EF6\\u7B2C\\u4E00\\u4E2A fiber\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n\tconst key = element.key;\n  let child = currentFirstChild;// \\u5B50\\u7EC4\\u4EF6\\u7684 fiber \\u5728\\u7236\\u7EC4\\u4EF6\\u4E2D\\u662F\\u94FE\\u8868\\u5B58\\u50A8\n  while (child !== null) {\n\t\t\t// TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) { // \\u67E5\\u627E element \\u5BF9\\u5E94\\u7684\\u65E7 fiber\\uFF0C\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE){\n\t\t\t\t\t\\xB7\\xB7\\xB7\n\t\t\t\t} else {\n\t\t\t\t\t\\xB7\\xB7\\xB7\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// \\u8FDB\\u5165\\u5230\\u8BE5\\u51FD\\u6570\\u4E2D\\uFF0Celement \\u53EA\\u4E3A\\u5355\\u7EC4\\u4EF6\\uFF0C\\u5176\\u4ED6\\u7684\\u65E7 fiber \\u90FD\\u53EF\\u4EE5\\u5220\\u9664\\u4E86\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n  }\n\n\t\t// \\u590D\\u7528\\u4E0D\\u4E86\\u65E7\\u7EC4\\u4EF6\\u7684 fiber\\uFF0C\\u90A3\\u53EA\\u80FD\\u65B0\\u5EFA fiber \\u4E86\\u3002\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u5904\\u7406\\u5B50\\u5143\\u7D20\\u4E3A\\u6570\\u7EC4\\u7684\\u60C5\\u51B5\\uFF0C\\u90A3\\u8FD9\\u4E2A\\u51FD\\u6570\\u7684\\u7528\\u9014\\u548C\",(0,n.jsx)(e.code,{children:\"reconcileSingleElement\"}),\" \\u7684\\u76EE\\u6807\\u5DEE\\u4E0D\\u591A\\uFF0C\\u5C31\\u662F\\u901A\\u8FC7 diff \\u7B97\\u6CD5\\u6784\\u5EFA\\u51FA \",(0,n.jsx)(e.code,{children:\"newChildren\"}),\" \\u5BF9\\u5E94\\u65B0 fiber \\uFF08\\u4E5F\\u4F1A\\u5224\\u65AD\\u662F\\u5426\\u590D\\u7528\\u5C31 fiber\\uFF09\"]})]})}function g(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var y=g;return w(T);})();\n;return Component;"},"__N_SSG":true}